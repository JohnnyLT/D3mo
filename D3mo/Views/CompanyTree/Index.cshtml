@section localStyles
{
    <style type="text/css">
        svg {
            background-color: white;
            border-radius: 5px;
        }

        g.node circle {
            fill: #4DBCE9;
            stroke: black;
            stroke-width: 2px;
        }
    </style>
}

<div class="jumbotron">
    <h2>SVG</h2>
    <p>

    </p>
</div>


<div class="row">
    <div class="col-md-12">
        <svg viewBox="0 0 960 540" width="100%" height="100%"></svg>
    </div>
</div>
<br />

@section scripts
{
    <script type="text/javascript">
        var hDepth = {},

            getHDepth = function (employeeId, coachId, people) {
                if (people === undefined) {
                    return 0;
                }

                if (people[employeeId] !== undefined) {
                    return people[employeeId];
                }

                if (people[coachId] === undefined) {
                    people[coachId] = 0;
                    people[employeeId] = 1;
                }

                hDepth[employeeId] = 1 + getHDepth(coachId, null, people);
                return hDepth[employeeId];
            },

            getLevelCalculator = function () {
                var levels = {};
                return function (depth) {
                    if (levels[depth] === undefined) {
                        levels[depth] = 0;
                    } else {
                        levels[depth]++;
                    }
                    return levels[depth];
                };
            },

            assembleTreeObject = function (relationships) {
                var tree = {};
                var root = {};
                var r = relationships[0];

                var dataMap = relationships.reduce(function (map, node) {
                    map[node.employee.id] = node;
                    return map;
                }, {});

                // create the tree array
                var treeData = [];
                relationships.forEach(function (node) {
                    // add to parent
                    var parent = dataMap[node.parent];
                    if (parent) {
                        // create child array if it doesn't exist
                        (parent.children || (parent.children = []))
                            // add node to child array
                            .push(node);
                    } else {
                        // parent is null or missing
                        treeData.push(node);
                    }
                });

                //return [{
                //    name: r.coach.id,
                //    displayName: r.coach.fullName,
                //    parent: 'null',
                //    children: [
                //        {
                //            name: r.employee.id,
                //            displayName: r.employee.fullName,
                //            parent: r.coach.id,
                //            children: [
                //                {
                //                    name: '123',
                //                    displayName: 'George',
                //                    parent: r.employee.id,
                //                    children: []
                //                }
                //            ]
                //        },
                //        {
                //            name: '456',
                //            displayName: 'Hershel',
                //            parent: r.coach.id,
                //            children: []
                //        },
                //        {
                //            name: '789',
                //            displayName: 'Hank',
                //            parent: r.coach.id,
                //            children: [
                //                {
                //                    name: 'ASD',
                //                    displayName: 'Freddy',
                //                    parent: '789',
                //                    children: []
                //                },
                //                {
                //                    name: 'FGH',
                //                    displayName: 'Andrew',
                //                    parent: '789',
                //                    children: []
                //                }
                //            ]
                //        }
                //    ]
                //}
                //];
            },

            buildTree = function () {
                var svg = d3.select('svg');

                var treeChart = d3.layout.tree();
                treeChart
                    .size([960, 540])
                    .children(function (d) { return d; });

                d3.json('api2/EmployeeCoaches',
                    function (error, data) {

                        var linkGenerator = d3.svg.diagonal();
                        var treeData = assembleTreeObject(data);
                        var x = treeChart(treeData);

                        d3.select('svg')
                            .append('g')
                            .attr('id', 'treeG')
                            .selectAll('g')
                            .data(x)
                            .enter()
                            .append('g')
                            .attr('class', 'node')
                            .attr('transform', function (d) {

                                return 'translate(' + d.x + ',' + d.y + ')';
                            });

                        d3.selectAll('g.node')
                            .append('circle')
                            .attr('r', 6);

                        var links = treeChart.links(x);

                        d3.select('#treeG')
                            .selectAll('path')
                            .data(links)
                            .enter()
                            .insert('path', 'g')
                            .attr('d', linkGenerator)
                            .style('fill', 'none')
                            .style('stroke', 'black')
                            .style('stroke-width', '2px');
                    });
            };

        $('document').ready(function () {
            buildTree();
        });
    </script>
}
